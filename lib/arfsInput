function [ packet ] = arfsInput( )
%Main I/O for ARFS
%   Detailed explanation goes here

warning off; %#ok<WNOFF>

packet = [];

prompt = {
    'Enter path',...
    'Enter video name (avi''s only please) or leave blank to process whole directory',...
    'Enter output file name, if left blank it will be named after the path',...
    'Modalities (separate with commas)',...
    'Type on or off to toggle display',...
    'Strip size for distortion detection',...
    'Number of frames to output'...
    'Skip Motion Tracking?'
    };
dlg_title = 'ARFS 2015';
num_lines = 1;
defaults  = {'','','','confocal, split','off','20','10','no'};

if ispc
    slash = '\';
else
    slash = '/';
end

%% INPUT VALIDATION LOOP
inputInvalid = true;
while inputInvalid
    inputInvalid = false;
    
    response = inputdlg(prompt, dlg_title, num_lines, defaults);
    defaults = response;
    
    if isempty(response)
        fprintf('\nThat''s okay, maybe later.\n\n');
        return;
    end

    %% PATH CONTROL
    path = response{1};
    if exist(path,'dir') == 7
        addpath(path);
        defaults{1} = path;
    else
        beep;
        msg = 'Path not found';
        h = msgbox(msg,'Error','replace');
        inputInvalid = true;
        continue;
    end

    %% OUTPUT CONTROL
    outputCSV = response{3};
    if isempty(outputCSV)
        pathParts = strsplit(path,slash);
        outputCSV = strcat(pathParts{2},'_',pathParts{end-1});
        defaults{3} = outputCSV;
        outputFile = strcat(path,slash,outputCSV,'.xlsx');
    else
        try
            % writing a test file
            a = magic(3);
            T = table(a);
            outputFile = strcat(path,slash,outputCSV,'.xlsx');
            sheetName = 'test';
            writetable(T, outputFile, 'Sheet', sheetName);
            defaults{3} = outputCSV;
        catch
            % report error
            beep;
            msg = 'Output file name invalid';
            h = msgbox(msg,'Error','replace');
            inputInvalid = true;
            continue;
        end
    end

    %% PRIMARY SEQUENCE CONTROL
    if isempty(response{2})
        primInd = 4;
        prim = response{primInd};
        prim = strtrim(strsplit(prim,','));
        acceptMod = {'CONFOCAL', 'DIRECT', 'REFLECT', 'AVG', 'SPLIT',...
            'SPLIT_DET', 'SPLIT DETECTOR', 'ALL'};
        splits = {'SPLIT', 'SPLIT_DET', 'SPLIT DETECTOR'};

        if strcmp(prim,'')
            modality = 'ALL';
            nMods = 1;
            defaults{primInd} = modality;
            invalidMods = false;
        else
            nMods = numel(prim);
            modality = cell(1,nMods);
            invalidMods = false(nMods,1);
            for i=1:nMods
                if any(strcmpi(prim(i),acceptMod))
                    if any(strcmpi(prim(i),splits))
                        modality{i} = 'SPLIT';
                    else
                        modality{i} = prim{i};
                    end
                else
                    invalidMods(i) = true;
                end
            end
        end
        if any(invalidMods)
            beep;
            msg = ['When did we start acquiring "',prim{invalidMods},'" sequences?'];
            h = msgbox(msg,'Error','replace');
            inputInvalid = true;
            continue;
        else
            defaults{primInd} = strjoin(prim,', ');
        end
    else
        nameParts = strsplit(response{2},'_');
        presumedModality = nameParts{end-1};
        if strcmp(presumedModality,'det')
            presumedModality = nameParts{end-2};
        end
        modality = presumedModality;
    end
    
    %% GET VIDEOS
    name = response{2};
    if isempty(name)
        single = false;
        if nMods == 1 && strcmpi(modality,'ALL')
            pathAvi = horzcat(path,slash,'*.avi');
            videoFiles = dir(pathAvi);
        else
            j=0;
            for i=1:nMods
                checkMod = ['*',lower(modality{i}),'*'];
                pathAvi  = horzcat(path,slash,checkMod);
                checkExt = dir(pathAvi);
                if isempty(checkExt)
%                     beep;
%                     msg = ['Couldn''t find any ',lower(modality{i}),' videos'];
%                     h = msgbox(msg,'Error','replace');
                    videoFiles = [];
%                     inputInvalid = true;
                    break;
                else
                    for k=1:numel(checkExt)
                        parts = strsplit(checkExt(k).name,'.');
                        if strcmp(parts{end},'avi')
                            j = j+1;
                            videoFiles(j) = checkExt(k); 
                        end
                    end
                end
            end
        end
        if isempty(videoFiles)
            beep;
            msg = ['Couldn''t find any ',lower(modality),' videos'];
            h = msgbox(msg,'Error','replace');
            inputInvalid = true;
            continue;
        else
            clear checkExt;
            nFiles = numel(videoFiles);
        end
    else
        avi = 'avi';
        nameParts = strsplit(name,'.');
        ext = nameParts{end};
        if ~(strcmp(avi,ext))
            name = strcat(name,['.',avi]);
        end
        if exist(name,'file') == 2
            videoFiles.name = name;
            single = true;
            nFiles = 1;
            defaults{2} = name;
        else
            beep;
            msg = 'File not found or file invalid';
            h = msgbox(msg,'Error','replace');
            inputInvalid = true;
            continue;
        end
    end    
    %% DISPLAY CONTROL
    
    dis = response{5};
    acceptPOS = {'ON','TRUE','Y','YES','YEP','YUP','SURE'};
    acceptNEG = {'OFF','FALSE','N','NO','NOPE'};
    if isempty(dis)
        display = false;
    elseif any(strcmpi(dis,acceptPOS))
        display = true;
        defaults{4} = dis;
    elseif any(strcmpi(dis,acceptNEG))
        display = false;
        defaults{4} = dis;
    else
        beep;
        msg = 'Sorry, did you want display on or off?';
        h = msgbox(msg,'Error','replace');
        inputInvalid = true;
        continue;
    end

    %% STRIP SIZE CONTROL
    ss = response{6};
    if isempty(ss)
        beep;
        msg = 'So, we need a strip size. It''s just for the bean counters.';
        h = msgbox(msg,'Error','replace');
        inputInvalid = true;
        continue;
    else
        ifmSS = round(str2double(ss));
        ss=ifmSS;
        if ifmSS <= 0
            msg = 'ifm strip size must be greater than 0';
        elseif isnan(ifmSS)
            msg = 'strip size should be, like, a NUMBER...';
        end
        if ifmSS <= 0 || isnan(ifmSS)
            beep;
            h = msgbox(msg,'Error','replace');
            inputInvalid = true;
            continue;
        end
    end
    
    %% FRAME REQUEST CONTROL
    frequest = response{7};
    if isempty(frequest)
        beep;
        msg = 'You can''t leave the number of frames blank; that''s anarchy';
        h = msgbox(msg,'Error','replace');
        inputInvalid = true;
        continue;
    else
        nFramesReq = round(str2double(frequest));
        if nFramesReq == 0
            beep;
            msg = 'You want no frames? Why are you even here?';
            h = msgbox(msg,'Error','replace');
            inputInvalid = true;
            continue;
        elseif nFramesReq < 0
            beep;
            msg = 'NEGATIVE FRAMES? WHAT UNIVERSE IS THIS??';
            h = msgbox(msg,'Error','replace');
            inputInvalid = true;
            continue;
        elseif not(isnumeric(nFramesReq))
            if strcmpi(frequest,'ALL')
                nFramesReq = 0;
            else
                beep;
                msg = 'What are you doing? Number of frames should be a NUMBER!';
                h = msgbox(msg,'Error','replace');
                inputInvalid = true;
                continue;
            end
        end
        if nFramesReq > 0 && nFramesReq < 3
            fprintf('\nJust a heads up, I would request at least 3 frames\n');
        end
    end
    
    %% MOTION TRACKING SKIP CONTROL
    mtsind = 8;
    mtskip = response{mtsind};
    if isempty(mtskip)
        beep;
        msg = 'Oops! But about motion tracking... Do it? Don''t do it?';
        h = msgbox(msg,'Error','replace');
        inputInvalid = true;
        continue;
    elseif any(strcmpi(mtskip,acceptPOS))
        mtskip = true;
        defaults{mtsind} = 'yes';
    elseif any(strcmpi(mtskip,acceptNEG))
        mtskip = false;
        defaults{mtsind} = 'no';
    else
        beep;
        msg = 'FATAL ERROR!! Just kidding, MORBID error: skip motion tracking?';
        h = msgbox(msg,'Error','replace');
        inputInvalid = true;
        continue;
    end
    
end


%% Setup output packet
packet.vid     = videoFiles;
packet.slash   = slash;
packet.single  = single;
packet.nFiles  = nFiles;
packet.mod     = modality;
packet.ss      = ss;
packet.nReq    = nFramesReq;
packet.display = display;
packet.outFile = outputFile;
packet.path    = path;
packet.mtskip  = mtskip;

delete(h)
end

