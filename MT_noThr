function [ data ] = MT_noThr( images, data, cropParams )
%mtFFandStrip tracks interframe motion in a video

%% Set Thresholds
gf = data.frames;

% % IFM Max slopes
% ifm_ms = data.scores.maxSlopes;
% mn_ifm_ms = mean(ifm_ms); sd_ifm_ms = std(ifm_ms);
% ifm_ms_sdc = 2.0; % HARD CODED :/
% ifm_ms_thr = mn_ifm_ms - (ifm_ms_sdc * sd_ifm_ms);
% ifm_ms_bad = ifm_ms < ifm_ms_thr;
% IFM Sum of slopes
ifm_ss = data.scores.sumSlopes;
mn_ifm_ss = mean(ifm_ss); sd_ifm_ss = std(ifm_ss);
ifm_ss_sdc = 1; % HARD CODED :/
ifm_ss_thr = mn_ifm_ss - (ifm_ss_sdc * sd_ifm_ss);
ifm_ss_bad = ifm_ss < ifm_ss_thr;
% Intensity
int = data.scores.int;
mn_int = mean(int); sd_int = std(int);
int_sdc = 2.0; % HARD CODED :/
int_thr = mn_int - (int_sdc * sd_int);
int_bad = int < int_thr;

% bads = [ifm_ms_bad, ifm_ss_bad, int_bad];
bads = [ifm_ss_bad, int_bad];
bf = any(bads,2);
n=0;
while length(find(bf))/length(gf) > 0.8 && length(gf) >= 20 % increment sd coeffs
    n=n+1;
    if n>1000
        bf = [];
        break;
    end
    ifm_ms_sdc = ifm_ms_sdc + 0.1;
    ifm_ss_sdc = ifm_ss_sdc + 0.1;
    int_sdc    = int_sdc    + 0.1;
    ifm_ms_thr = mn_ifm_ms - (ifm_ms_sdc * sd_ifm_ms);
    ifm_ss_thr = mn_ifm_ss - (ifm_ss_sdc * sd_ifm_ss);
    int_thr    = mn_int    - (int_sdc    * sd_int);
    ifm_ms_bad = ifm_ms < ifm_ms_thr;
    ifm_ss_bad = ifm_ss < ifm_ss_thr;
    int_bad    = int    < int_thr;
    bads = [ifm_ms_bad, ifm_ss_bad, int_bad];
    bf = any(bads,2);
end
%% Eliminate bad frames
if any(bf)
    gf(bf)                    = [];
%     data.scores.maxSlopes(bf) = [];
    data.scores.sumSlopes(bf) = [];
    data.scores.prelim(bf)    = [];
    data.scores.int(bf)       = [];
end

%% Initialize
cp         = cropParams;
cropSampY  = cp.ht;
cropSampX  = cp.wd;
nrf        = length(gf);   % Number of Remaining Frames
nComps     = nrf-1;        % Number of Comparisons
track      = zeros(nrf,2); % Positions
nccs       = zeros(nrf,1); 
ancc       = nccs;
ssf        = data.scores.prelim;
fails      = false(nrf,1);

%% Scan video and get a preliminary track
h = waitbar(0,'First Trace');
for i=1:nComps
    temInd = gf(i);     tem = images{temInd};
    samInd = gf(i+1);   sam = images{samInd};
    [nccs(i), dx, dy, fails(i)] = tryFF(sam,tem,cp);
    track(i+1,1) = dx + track(i,1);
    track(i+1,2) = dy + track(i,2); %NOTE: in cartesian coords
    if i==1
        ancc(i) = nccs(i);
    else
        ancc(i) = (nccs(i)+nccs(i-1))/2;
    end
    waitbar(i/nComps);
end
close(h);

%% Pad the last element in nccs
nccs(end) = nccs(end-1);
ancc(end) = nccs(end-1);

%% Check out early
if ~any(fails(1:end-1))
    data.x          = track(:,1);
    data.y          = track(:,2);
    data.frames     = gf;
    data.scores.ncc = prepScore(ancc,'dir');
    return;
end

%% Get threshold for what determines a "good" ncc
% fprintf('Still thinking...\n');

% mNcc = mean(nccs);
% sdNcc = std(nccs);
% if kstest((nccs-mean(nccs))./std(nccs))
%     mNcc = median(nccs);
% end
% 
% %% Set threshold
% sdCoeff = 1; % HARD CODED
% nccThr = mNcc - (sdCoeff * sdNcc) + ((skewness(nccs)>0)*skewness(nccs));

%% Preallocate and initialize community lists
% isGoodPartner = nccs > nccThr; % if goodPeaks(i) == 0, suspect = i+1
% isBadPartner  = not(isGoodPartner); % for readability
detainees     = false(nrf,1); % frames that correlate poorly with neighbors
lkgfList      = false(nrf,1); % Last Known Good Frame (lkgf)
firstCitzList = false(nrf,1);

%% Quickly round up known criminals and find lkgf's
for i=1:nComps
    if fails(i) && not(detainees(i))
        lkgfList(i) = true;
        for j=i+1:nComps
            if fails(j)
                detainees(j) = true;
            else
                break;
            end
        end
    end
end
% for i=1:nComps
%     if isBadPartner(i) && not(detainees(i))
%         lkgfList(i) = true;
%         for j=i+1:nComps
%             if isBadPartner(j)
%                 detainees(j) = true;
%             else
%                 break;
%             end
%         end
%     end
% end

%% Find first citizens
if ~fails(1)
    firstCitzList(1) = true;
end
for i=1:nComps-1
    if fails(i) && ~fails(i+1)
        firstCitzList(i+1) = true;
    end
end

%% Handle possibility that first frame(s) is/are bad
if fails(1)
    % Initiate track at first good frame
    getGoods      = find(~fails);
    firstGood     = getGoods(1);
    lkgfList(1)   = false;
    detainees(1)  = true;
    % Fix track for sake of simplicity
    xshift = -track(firstGood,1);
    yshift = -track(firstGood,2);
    track(firstGood:end,1) = track(firstGood:end,1) + xshift;
    track(firstGood:end,2) = track(firstGood:end,2) + yshift;
end

%% Handle possibility that last frame is bad
if fails(end)
    detainees(end) = true;
else
    if ~fails(end-1)
        lkgfList(end) = true;
    end
end

nCommunities = 0;
if any(detainees)
    nCommunities = sum(firstCitzList);
end

%% Attempt to link communities in the case of a single bad frame
for i=1:nrf-2
    if lkgfList(i) && firstCitzList(i+1)
        temInd = gf(i);     tem = images{temInd};
        samInd = gf(i+2);   sam = images{samInd};
        [nccScore, dx, dy, fail] = tryFF(sam,tem,cp);
        if ~fail
            detainees(i+1) = true;
            lkgfList(i) = false;
            firstCitzList(i+1) = false;
            fails(i) = false;
            nCommunities = nCommunities - 1;
            xshift = track(i,1) + dx - track(i+2,1);
            yshift = track(i,2) + dy - track(i+2,2);
            track(i+2:end,1) = track(i+2:end,1) + xshift;
            track(i+2:end,2) = track(i+2:end,2) + yshift;
            nccs(i) = nccScore;
            ancc(i)   = (nccs(i) + nccs(i-1))/2;
            ancc(i+2) = (nccs(i) + nccs(i+2))/2;
        end
    end
end
% if any(detainees)
%     badCommunities = false(1,nCommunities);
% end

%% Establish communities
citzInd     = find(firstCitzList);
lkgfInd     = find(lkgfList);
if length(citzInd)~=length(lkgfInd)
    lastFirst = citzInd(end);
    lastLast  = lastFirst+1;
    lkgfInd(end+1) = lastLast;
end
commSize    = lkgfInd - citzInd + 1; % inclusive
commLimits  = horzcat(citzInd,lkgfInd,commSize);

%% Consider the neglected last frames
if ~lkgfList(end)
    I = find(lkgfList);
    lastLast = I(end);
    detainees(lastLast+1:end) = true;
end

%% Find saints
% In the future I'll probably want to calculate the community centroid and
% have this play a role in who the saints are.
saints = false(nrf,1);
ssf = ssf + ancc;
for i=1:nCommunities
    bounds = commLimits(i,1):commLimits(i,2);
    if commLimits(i,3) < 3
        saintInd = bounds(1); % saint always same as firstCitz
    elseif commLimits(i,3) == 3
        saintInd = bounds(2); % make saint different from firstCitz and LKGF
    else
        [~,I] = sort(ssf(bounds),'descend');
        if I(1) == 1 % saintInd same as firstCitz
            saintInd = bounds(I(2));
        else
            saintInd = bounds(I(1));
        end
    end
    saints(saintInd) = true;
end

% From Chi_MT
% if nCommunities > 1
%     saints = false(nrf,1);
%     for i=1:nCommunities
%         bounds = commLimits(i,1):commLimits(i,2);
%         if commLimits(i,3) < 3
%             saintInd = bounds(1); % saint always same as firstCitz
%         elseif commLimits(i,3) == 3
%             saintInd = bounds(2); % make saint different from firstCitz and LKGF
%         else
%             [~,I] = sort(ancc(bounds),'descend');
%             if I(1) == 1 || I(1) == max(I) % highest score same as firstCitz or lkgf
%                 if I(2) == 1 || I(2) == max(I); % second highest score same as firstCitz or lkgf
%                     saintInd = bounds(I(3));
%                 else
%                     saintInd = bounds(I(2));
%                 end
%             else
%                 saintInd = bounds(I(1));
%             end
%         end
%         saints(saintInd) = true;
%     end
% end

%% Handle communities
h = waitbar(0,'Rearranging groups of frames');
pairs = false(nCommunities);
for i=1:nCommunities
    waitbar(i/nCommunities);
    % Have each community processed by each other community
    bounds = commLimits(i,1):commLimits(i,2);

    
    %% Set up test frames
    testFirstCitzInd    = commLimits(i,1);
    testFirstCitzFrame  = gf(testFirstCitzInd);
    testFirstCitzImg    = images{testFirstCitzFrame}...
        (cropSampY+1:end-cropSampY,cropSampX+1:end-cropSampX);
    
    testLKGFInd         = commLimits(i,2);
    testLKGFFrame       = gf(testLKGFInd);
    testLKGFImg         = images{testLKGFFrame}...
        (cropSampY+1:end-cropSampY,cropSampX+1:end-cropSampX);
    
    %        1, 2, ....., n
    % 1st   |__|__|__|__|__| 1
    % saint |__|__|__|__|__| 2
    % lkgf  |__|__|__|__|__| 3
    
    % avg   |__|__|__|__|__|
    nccsGrid   = cell(3,nCommunities);
    aveNccs    = zeros(1,nCommunities);
    xGrid      = nccsGrid;
    yGrid      = nccsGrid;
    failGrid   = nccsGrid;

    %% Set up source frames
    for j=1:nCommunities
        if j==i
            continue;
        end

        if commLimits(j,3) >= 3
            %% Compare first against saint
            I = find(saints);
            sourceSaintInd      = I(j);
            sourceSaintFrame    = gf(sourceSaintInd);
            sourceSaintImg      = images{sourceSaintFrame};
            
            [maxNcc,dx,dy,fail]=tryFF(testFirstCitzImg, sourceSaintImg, cp);
%             if fail
%                 [maxNcc,dx,dy]=...
%                     tryStrips(ss, testFirstCitzImg, sourceSaintImg, cp);
%             end
            xshift = track(sourceSaintInd,1) + dx - track(testFirstCitzInd,1);
            yshift = track(sourceSaintInd,2) + dy - track(testFirstCitzInd,2);
            
            nccsGrid{2,j}   = maxNcc;
            xGrid{2,j}      = xshift;
            yGrid{2,j}      = yshift;
            failGrid{2,j}   = fail;
        end
        
        %% Compare first against first
        sourceFirstCitzInd      = commLimits(j,1);
        sourceFirstCitzFrame    = gf(sourceFirstCitzInd);
        sourceFirstCitzImg      = images{sourceFirstCitzFrame};
        
        [maxNcc,dx,dy,fail]=tryFF(testFirstCitzImg, sourceFirstCitzImg, cp);
%         if fail
%             [maxNcc,dx,dy]= ...
%                 tryStrips(ss, testFirstCitzImg, sourceFirstCitzImg, cp);
%         end
        xshift = track(sourceFirstCitzInd,1) + dx - track(testFirstCitzInd,1);
        yshift = track(sourceFirstCitzInd,2) + dy - track(testFirstCitzInd,2);
        
        nccsGrid{1,j}  = maxNcc;
        xGrid{1,j}     = xshift;
        yGrid{1,j}     = yshift;
        failGrid{1,j}  = fail;

        %% Compare last against last
        sourceLKGFInd   = commLimits(j,2);
        sourceLKGFFrame = gf(sourceLKGFInd);
        sourceLKGFImg   = images{sourceLKGFFrame};
        
        [maxNcc,dx,dy,fail] = tryFF(testLKGFImg, sourceLKGFImg, cp);
%         if fail
%             [maxNcc,dx,dy] = tryStrips(ss, testLKGFImg, sourceLKGFImg, cp);
%         end
        xshift = track(sourceLKGFInd,1) + dx - track(testLKGFInd,1);
        yshift = track(sourceLKGFInd,2) + dy - track(testLKGFInd,2);
        
        nccsGrid{3,j} = maxNcc;
        xGrid{3,j}    = xshift;
        yGrid{3,j}    = yshift;
        failGrid{3,j} = fail;
                
        % Update nccs(lkgf)
        if maxNcc > nccs(sourceLKGFInd)
            nccs(sourceLKGFInd) = maxNcc;
            ancc(sourceLKGFInd) = (maxNcc+nccs(sourceLKGFInd-1))/2;
        end
        
    end
    %% Check for bad communities
    tmpGrid = failGrid;
    tmpGrid(:,i) = [];
    for j=1:numel(tmpGrid)
        if isempty(tmpGrid{j})
            tmpGrid{j} = false;
        end
    end
    tmpGrid = cell2mat(tmpGrid);
    if all(tmpGrid(:))
%         % Detain all members of current community
%         badCommunities(i) = true;
%         detainees(bounds) = true;
        continue;
    end
        
    %% Get Average NCC
    for j=1:nCommunities
        aveNccs(j) = mean(vertcat(nccsGrid{:,j}));
    end
    
    %% Find best community
    [~,bestComm] = max(aveNccs);
    bestCommSize = commLimits(bestComm,3);
    
    pairs(bestComm,i) = true;
    if pairs(i,bestComm) % Skip any best pairs
        continue;
    end
    pairs(bestComm,:) = or(pairs(i,:),pairs(bestComm,:)); % Absorb pairings
    
    
    %% Saint
    if bestCommSize >= 3
        dx2 = xGrid{2,bestComm};
        dy2 = yGrid{2,bestComm};
        m2 = nccsGrid{2,bestComm}^2; % saints weighting factor
    end
    %% First
    dx1 = xGrid{1,bestComm};
    dy1 = yGrid{1,bestComm};
    m1 = nccsGrid{1,bestComm}^2; % first weighting factor
    
    %% Last
    dx3  = xGrid{3,bestComm};
    dy3  = yGrid{3,bestComm};
    m3 = nccsGrid{3,bestComm}^2; % last weighting factor
    
    %% Calculate weighted average vector
    if bestCommSize >= 3
        dxPrime = ((dx1*m1)+(dx2*m2)+(dx3*m3))/(m1+m2+m3);
        dyPrime = ((dy1*m1)+(dy2*m2)+(dy3*m3))/(m1+m2+m3);
    else
        dxPrime = ((dx1*m1)+(dx3*m3))/(m1+m3);
        dyPrime = ((dy1*m1)+(dy3*m3))/(m1+m3);
    end
    
    %% Get new position
    track(bounds,1) = track(bounds,1) + dxPrime;
    track(bounds,2) = track(bounds,2) + dyPrime;
    % Adjust pairs if any
    if any(pairs(i,:))
        pp = find(pairs(i,:));
        npp = numel(pp);
        for j=1:npp
            ppBounds = commLimits(pp(j),1):commLimits(pp(j),2);
            track(ppBounds,1) = track(ppBounds,1) + dxPrime;
            track(ppBounds,2) = track(ppBounds,2) + dyPrime;
        end
    end    
end
close(h);

%% Process detainees
h = waitbar(0,'Handling difficult frames');
if any(detainees)
    fprintf('Still thinking...\n');
    nDet = length(find(detainees));
    convicts = false(nrf,1);
    
    for i=1:nDet
        waitbar(i/nDet);
        I = find(detainees);
        detInd      = I(i);
        detFrame    = gf(detInd);
        detImg      = images{detFrame}...
            (cropSampY+1:end-cropSampY,cropSampX+1:end-cropSampX);
        
        I = find(saints);
        badFit = false;
        for j=1:nCommunities
%             if badCommunities(j)
%                 continue;
%             end
            poInd   = I(j);
            poFrame = gf(poInd);
            poImg   = images{poFrame};
            [detNcc,dx,dy,fail] = tryFF(detImg, poImg, cropParams);
%             if fail
%                 [detNcc,dx,dy] = tryStrips(ss, detImg, poImg, cropParams);
%             end
            
            if ~fail
                track(detInd,1) = track(poInd,1) + dx;
                track(detInd,2) = track(poInd,2) + dy;
                badFit = false;
                if detNcc > nccs(detInd)
                    nccs(detInd) = detNcc;
                    ancc(detInd) = (detNcc+nccs(poInd))/2;
                end
                break;
            else
                badFit = true;
            end
        end
        if badFit
            convicts(detInd) = true;
        end
    end
    % Eliminate convicts
    if any(convicts)
        gf(convicts)            = [];
        ancc(convicts)          = [];
        track(convicts,:)       = [];
        data.scores.sumSlopes(convicts) = [];
%         data.scores.maxSlopes(convicts) = [];
        data.scores.int(convicts)       = [];
        data.scores.prelim(convicts)    = [];
    end
end
close(h);

% Reset to 0
track(:,1) = track(:,1) - track(1,1);
track(:,2) = track(:,2) - track(1,2);

data.x          = track(:,1);
data.y          = track(:,2);
data.frames     = gf;
data.scores.ncc = prepScore(ancc,'dir');

end

% subplot(224);
% scatter(final.x,final.y);
% 
% [ht,wd] = size(images{1});
% minx = min(final.x);
% maxx = max(final.x) + wd;
% miny = min(final.y);
% maxy = max(final.y) + ht;
% bigHT = numel(miny:maxy);
% bigWD = numel(minx:maxx);
% bigImg = ones(bigHT,bigWD);
% xShifted = final.x + abs(minx) + 1;
% yShifted = final.y + abs(miny);
% figure;
% for i=1:numel(final.frames)
%     bigImg(bigHT-(yShifted(i)+ht)+1:bigHT-yShifted(i),xShifted(i):xShifted(i)+wd-1) = ...
%         images{final.frames(i)};
%     imshow(bigImg);
%     drawnow;
% end
        
    
    %%%%%%%%%%%
    % DISPLAY %
    %%%%%%%%%%%
%     close all;
%     sizes = 50.*ones(nrf,1);
%     colors = zeros(nrf,3);
%     colors(bounds,:) = horzcat(ones(numel(bounds),1),zeros(numel(bounds),1),zeros(numel(bounds),1));
%     set(h2,'CData',colors);
%     drawnow;
    
%% %%%%%%%%
% DISPLAY %
%%%%%%%%%%%
% blue    = [0.0, 0.0, 1.0]; % First
% pink    = [0.0, 1.0, 0.0]; % Saints
% orange  = [1.0, 0.5, 0.0]; % Last
% % black   = [0.0, 0.0, 0.0]; % Default

% colors = zeros(nrf,3);
% for i=1:nrf
%     if saints(i)
%         colors(i,:) = pink;
%     end
%     if firstCitzList(i) % allow first to overwrite saints
%         colors(i,:) = blue;
%     elseif lkgfList(i)
%         colors(i,:) = orange;
%     end
% end

% absorbVidName = 'absorb.avi';
% writerObj = VideoWriter(absorbVidName);
% open(writerObj);

    %%%%%%%%%%%
    % DISPLAY %
    %%%%%%%%%%%
%     sizes(bounds) = 100;    

        %%%%%%%%%%%
        % DISPLAY %
        %%%%%%%%%%%
%         figure;
%         scatter(track(:,1),track(:,2),sizes,colors);
%         xlim([-1000 500]);
%         ylim([-8000 500]);
%         hold on;
%         plot(track(:,1),track(:,2),'Color','k');

            %%%%%%%%%%%
            % DISPLAY %
            %%%%%%%%%%%
%             fromSaintX = [track(sourceSaintInd,1),track(sourceSaintInd,1) + dx];
%             fromSaintY = [track(sourceSaintInd,2),track(sourceSaintInd,2) + dy];
%             s2fx = [track(sourceSaintInd,1),track(testFirstCitzInd,1)];
%             s2fy = [track(sourceSaintInd,2),track(testFirstCitzInd,2)];
%             plot(fromSaintX,fromSaintY,'Color','r');
%             plot(s2fx,s2fy,'Color','r','LineStyle','--');

        %%%%%%%%%%%
        % DISPLAY %
        %%%%%%%%%%%
%         fromFirstX = [track(sourceFirstCitzInd,1),track(sourceFirstCitzInd,1) + dx];
%         fromFirstY = [track(sourceFirstCitzInd,2),track(sourceFirstCitzInd,2) + dy];
%         f2fx = [track(sourceFirstCitzInd,1),track(testFirstCitzInd,1)];
%         f2fy = [track(sourceFirstCitzInd,2),track(testFirstCitzInd,2)];
%         plot(fromFirstX,fromFirstY,'Color','r');
%         plot(f2fx,f2fy,'Color','r','LineStyle','--');

        %%%%%%%%%%%
        % DISPLAY %
        %%%%%%%%%%%
%         fromFirstX = [track(sourceLKGFInd,1),track(sourceLKGFInd,1) + dx];
%         fromFirstY = [track(sourceLKGFInd,2),track(sourceLKGFInd,2) + dy];
%         l2lx = [track(sourceLKGFInd,1),track(testLKGFInd,1)];
%         l2ly = [track(sourceLKGFInd,2),track(testLKGFInd,2)];
%         plot(l2lx,l2ly,'Color','r','LineStyle','--');
%         plot(fromFirstX,fromFirstY,'Color','r');
%         hold off;
%         frame = getframe;
%         writeVideo(writerObj,frame);
    
    %%%%%%%%%%%%%%%%%%%
    % DISPLAY, before %
    %%%%%%%%%%%%%%%%%%%
    % Get community boxes
%     figure();
%     buffer = 50;
%     lineScale = 5;
%     scatter(track(:,1),track(:,2),buffer,colors);
%     hold on;
%     
%     bestBounds = commLimits(bestComm,1):commLimits(bestComm,2);    
%     testBounds = commLimits(i,1):commLimits(i,2);
%     
%     bestXs = track(bestBounds,1);
%     bestMinx = min(bestXs) - buffer;
%     bestMaxx = max(bestXs) + buffer;
%     bestYs = track(bestBounds,2);
%     bestMiny = min(bestYs) - buffer;
%     bestMaxy = max(bestYs) + buffer;
%     bestPatchX = [bestMinx, bestMinx, bestMaxx, bestMaxx];
%     bestPatchY = [bestMiny, bestMaxy, bestMaxy, bestMiny];
%     patch(bestPatchX,bestPatchY,black,'FaceColor','none','EdgeColor','black');
%     
%     testXs = track(testBounds,1);
%     testMinx = min(testXs) - buffer;
%     testMaxx = max(testXs) + buffer;
%     testYs = track(testBounds,2);
%     testMiny = min(testYs) - buffer;
%     testMaxy = max(testYs) + buffer;
%     testPatchX = [testMinx, testMinx, testMaxx, testMaxx];
%     testPatchY = [testMiny, testMaxy, testMaxy, testMiny];
%     patch(testPatchX,testPatchY,black,'FaceColor','none','EdgeColor','black');
%     
%     % Draw comparisons
%     bestFirstInd = bestBounds(1);
%     bestFirstNcc = lineScale*nccsGrid{1,bestComm};
%     
%     bestLastInd  = bestBounds(end);
%     testLastInd  = commLimits(i,2);
%     bestLastNcc  = lineScale*nccsGrid{3,bestComm};
%     if bestCommSize >= 3
%         I = find(saints);
%         bestSaintInd = I(bestComm);
%         bestSaintNcc = lineScale*nccsGrid{2,bestComm};
%         
%         saint2firstX = [track(bestSaintInd,1),track(testFirstCitzInd,1)];
%         saint2firstY = [track(bestSaintInd,2),track(testFirstCitzInd,2)];
%         plot(saint2firstX,saint2firstY,'LineWidth',bestSaintNcc);
%     end
%     
%     first2firstX = [track(bestFirstInd,1),track(testFirstCitzInd,1)];
%     first2firstY = [track(bestFirstInd,2),track(testFirstCitzInd,2)];
%     plot(first2firstX,first2firstY,'LineWidth',bestFirstNcc);
%     
%     last2lastX   = [track(bestLastInd,1),track(testLastInd,1)];
%     last2lastY   = [track(bestLastInd,2),track(testLastInd,2)];
%     plot(last2lastX,last2lastY,'LineWidth',bestLastNcc);
%     
%     hold off;
%     drawnow;
%     oldTestFirstXY = track(testFirstCitzInd,:);

%     refreshdata(h2);
%     drawnow;
%     newTestFirstXY = track(testFirstCitzInd,:);
    
    %%%%%%%%%%%%%%%%%%
    % DISPLAY, after %
    %%%%%%%%%%%%%%%%%%
    % Get community boxes
%     figure();
%     buffer = 50;
%     lineScale = 5;
%     scatter(track(:,1),track(:,2),buffer,colors);
%     hold on;
%     
%     bestBounds = commLimits(bestComm,1):commLimits(bestComm,2);    
%     testBounds = commLimits(i,1):commLimits(i,2);
%     
%     bestXs = track(bestBounds,1);
%     bestMinx = min(bestXs) - buffer;
%     bestMaxx = max(bestXs) + buffer;
%     bestYs = track(bestBounds,2);
%     bestMiny = min(bestYs) - buffer;
%     bestMaxy = max(bestYs) + buffer;
%     bestPatchX = [bestMinx, bestMinx, bestMaxx, bestMaxx];
%     bestPatchY = [bestMiny, bestMaxy, bestMaxy, bestMiny];
%     patch(bestPatchX,bestPatchY,black,'FaceColor','none','EdgeColor','black');
%     
%     testXs = track(testBounds,1);
%     testMinx = min(testXs) - buffer;
%     testMaxx = max(testXs) + buffer;
%     testYs = track(testBounds,2);
%     testMiny = min(testYs) - buffer;
%     testMaxy = max(testYs) + buffer;
%     testPatchX = [testMinx, testMinx, testMaxx, testMaxx];
%     testPatchY = [testMiny, testMaxy, testMaxy, testMiny];
%     patch(testPatchX,testPatchY,black,'FaceColor','none','EdgeColor','black');
%     
%     % Draw comparisons
%     bestFirstInd = bestBounds(1);
%     bestFirstNcc = lineScale*nccsGrid{1,bestComm};
%     
%     bestLastInd  = bestBounds(end);
%     testLastInd  = commLimits(i,2);
%     bestLastNcc  = lineScale*nccsGrid{3,bestComm};
%     if bestCommSize >= 3
%         I = find(saints);
%         bestSaintInd = I(bestComm);
%         bestSaintNcc = lineScale*nccsGrid{2,bestComm};
%         
%         saint2firstX = [track(bestSaintInd,1),track(testFirstCitzInd,1)];
%         saint2firstY = [track(bestSaintInd,2),track(testFirstCitzInd,2)];
%         plot(saint2firstX,saint2firstY,'LineWidth',bestSaintNcc);
%     end
%     
%     first2firstX = [track(bestFirstInd,1),track(testFirstCitzInd,1)];
%     first2firstY = [track(bestFirstInd,2),track(testFirstCitzInd,2)];
%     plot(first2firstX,first2firstY,'LineWidth',bestFirstNcc);
%     
%     last2lastX   = [track(bestLastInd,1),track(testLastInd,1)];
%     last2lastY   = [track(bestLastInd,2),track(testLastInd,2)];
%     plot(last2lastX,last2lastY,'LineWidth',bestLastNcc);
% 
%     scatter(oldTestFirstXY(1),oldTestFirstXY(2));
%     old2newX = [oldTestFirstXY(1),newTestFirstXY(1)];
%     old2newY = [oldTestFirstXY(2),newTestFirstXY(2)];
%     plot(old2newX,old2newY);
%     
%     hold off;
%     drawnow;
    
    %%%%%%%%%%%%%%%%%%%%%%
    % END DISPLAY, after %
    %%%%%%%%%%%%%%%%%%%%%%
    
    %%%%%%%%%%%
% DISPLAY %
%%%%%%%%%%%
% close(writerObj);

                %%%%%%%%%%%
            % DISPLAY %
            %%%%%%%%%%%
%             close all
%             colors(I,2) = ones(numel(I),1);
%             scatter(track(:,1),track(:,2),sizes,colors);
%             xlim(xl); ylim(yl);
%             hold on;
%             p2dx = [track(poInd,1), track(detInd,1)];
%             p2dy = [track(poInd,2), track(detInd,2)];
%             shiftX = [track(poInd,1), track(poInd,1)+dx];
%             shiftY = [track(poInd,2), track(poInd,2)+dy];
%             plot(p2dx,p2dy,'Color','r','LineStyle','--');
%             plot(shiftX,shiftY,'Color','r');
%             hold off;
%             frame = getframe;
%             writeVideo(writerObj,frame);

    %%%%%%%%%%%
    % DISPLAY %
    %%%%%%%%%%%
%     detVidName = 'det.avi';
%     writerObj = VideoWriter(detVidName);
%     open(writerObj);
%     colors = zeros(nrf,3);
%     colors(detainees,1) = ones(nDet,1);
%     sizes = 50.*ones(nrf,1);
%     scatter(track(:,1),track(:,2),sizes,colors);
%     xl = xlim;
%     yl = ylim;
    
%% DISPLAY
% figure();
% subplot(221);
% scatter(track(:,1),track(:,2));
% subplot(222);
% hist(nccs);
% subplot(223);
% plot(nccs);
% hold on
% thrLine = thr.*ones(nrf,1);
% plot(thrLine);
% hold off

%% DISPLAY
% traceVidName = 'trace.avi';
% writerObj = VideoWriter(traceVidName);
% open(writerObj);
% t = 0:2*pi/100:2*pi;

    
    %%%%%%%%%%%
    % DISPLAY %
    %%%%%%%%%%%
%     colors = zeros(nrf,3);
%     colors(i+1,:) = [1 0 0];
%     scatter(track(:,1),track(:,2),[],colors);
%     xlim([-1000 500]);
%     ylim([-8000 500]);
%     hold on;
%     plot(track(1:i+1,1),track(1:i+1,2));
%     patch((cp.memX*cos(t))+track(i,1),(cp.memY*sin(t))+track(i,2),'r',...
%         'FaceColor','none','LineStyle','--');
%     hold off;
%     frame = getframe;
%     writeVideo(writerObj,frame);

%%%%%%%%%%%
% DISPLAY %
%%%%%%%%%%%
% close(writerObj);
