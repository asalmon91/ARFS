function [ data ] = prelimScore( stage, wts, data )
%prelimScore Eliminates frames based on their inability to overcome their
%poor preliminary score
%   
%   wts = [weightINT, weightNCC, weightP2C, weightIFM]

weightINT = wts(1);
weightNCC = wts(2);
weightP2C = wts(3);
weightIFM = wts(4);

scores = data.scores.prelim;
%% Get preliminary scores
if strcmp(stage,'INT')
    scores = weightINT.*data.scores.int + scores;
    maxBoost = weightIFM + weightNCC + weightP2C;

elseif strcmp(stage,'IFM')
    scores = (weightIFM).*data.scores.sumSlopes + scores;
%     scores = (weightIFM/2).*data.scores.sumSlopes + scores;
%     scores = (weightIFM/2).*data.scores.maxSlopes + scores;
    maxBoost = weightNCC + weightP2C;
    
elseif strcmp(stage,'NCC')
    scores = weightNCC.*data.scores.ncc + scores;
    if data.mtskip
        data.scores.prelim = scores;
        return;
    end
    maxBoost = weightP2C;

elseif strcmp(stage,'P2C')
    scores = weightP2C.*data.scores.p2c + scores;
    data.scores.prelim = scores;
    return;
end

%% Find frames that couldn't possibly remain candidates
nrf = numel(data.frames);
preliminary = sort(scores, 'descend');
if nrf > 20
    elimThreshold = preliminary(20);
else
    elimThreshold = preliminary(end-1);
end

bf = scores + maxBoost < elimThreshold;
if any(bf)
    %% Eliminate these fields in every iteration
    scores(bf)              = [];
    data.frames(bf)         = [];
    data.scores.int(bf)     = [];
    %% Eliminate IFM
    if strcmp(stage,'IFM')
%         data.scores.maxSlopes(bf) = [];
        data.scores.sumSlopes(bf) = [];
    end
    %% Eliminate IFM and NCC
    if strcmp(stage,'NCC')
        if ~data.mtskip
            data.x(bf)              = [];
            data.y(bf)              = [];
        end
        data.scores.ncc(bf)         = []; % considering changing this if ncc score indepedent of mtskip
        data.scores.sumSlopes(bf)   = [];
%         data.scores.maxSlopes(bf)   = [];
    end
end

data.scores.prelim = scores;

end

% % weightIFI = wts(1);
% % weightNCC = wts(2);
% % weightP2C = wts(3);
% % weightBIM = wts(2);
% 
% weightINT = wts(1);
% weightNCC = wts(2);
% weightP2C = wts(3);
% weightIFM = wts(4);
% 
% scores = data.scores.prelim;
% if strcmp(stage,'NCC')
%     scores = weightNCC.*data.scores.ncc + scores;
% %     maxBoost = weightINT + weightBIM + weightP2C + weightIFM;
%     maxBoost = weightINT + weightP2C + weightIFM;
% 
% elseif strcmp(stage,'P2C')
%     scores = weightP2C.*data.scores.p2c + scores;
% %     maxBoost = weightINT + + weightBIM + weightIFM;
%     maxBoost = weightINT + weightIFM;
%     
% elseif strcmp(stage,'INT')
%     scores = weightINT.*data.scores.int + scores;
% %     maxBoost = weightBIM + weightIFM;
%     maxBoost = weightIFM;
%     
% elseif strcmp(stage,'BIM')
%     scores = weightBIM.*data.scores.bim + scores;
%     maxBoost = weightIFM;
%     
% elseif strcmp(stage,'IFM')
%     scores = (weightIFM/2).*data.scores.sumSlopes + scores;
%     scores = (weightIFM/2).*data.scores.maxSlopes + scores;
%     data.scores.prelim = scores;
%     return;
% end
% 
% nrf = numel(data.frames);
% preliminary = sort(data.scores.prelim, 'descend');
% if nrf > 20
%     elimThreshold = preliminary(20);
% else
%     elimThreshold = preliminary(end-1);
% end
% 
% bf = scores + maxBoost < elimThreshold;
% if any(bf)
%     % These fields in every iteration
%     scores(bf)             = [];
%     data.frames(bf)        = [];
%     if ~data.mtskip
%         data.x(bf)             = [];
%         data.y(bf)             = [];
%         data.scores.ncc(bf)    = [];
%     end
%     if ~strcmp(stage,'NCC')
%         if ~data.mtskip
%             data.clusters.assign(bf) = [];
%             data.scores.p2c(bf)      = [];
%             % Recalculate clusters and related info (names, sizes), p2c, score
%             % since this metric is heavily dependent on other frames
%             data = recalcClusters(data);
%             data.scores.prelim = scores - (weightP2C.*data.scores.p2c);
%             data.scores.p2c = getP2C(data);
%             data.scores.prelim = weightP2C.*data.scores.p2c + scores;
%         end
%         try
%             data.scores.int(bf) = [];
%         catch
%         end
% %         try
% %             data.scores.bim(bf) = [];
% %         catch
% %         end
%     end
% end
% 
% data.scores.prelim = scores;
